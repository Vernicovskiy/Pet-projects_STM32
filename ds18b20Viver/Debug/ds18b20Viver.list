
ds18b20Viver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002338  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002490  08002490  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002498  08002498  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002498  08002498  00012498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080024ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080024ac  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e09  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c5  00000000  00000000  00026e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00028208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  00028a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a7b  00000000  00000000  000291b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000891b  00000000  00000000  0003dc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082698  00000000  00000000  00046546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8bde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f8  00000000  00000000  000c8c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800245c 	.word	0x0800245c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800245c 	.word	0x0800245c

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b976 	b.w	800093c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	460d      	mov	r5, r1
 8000670:	4604      	mov	r4, r0
 8000672:	4688      	mov	r8, r1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d14d      	bne.n	8000714 <__udivmoddi4+0xac>
 8000678:	428a      	cmp	r2, r1
 800067a:	4694      	mov	ip, r2
 800067c:	d968      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b152      	cbz	r2, 800069a <__udivmoddi4+0x32>
 8000684:	fa01 f302 	lsl.w	r3, r1, r2
 8000688:	f1c2 0120 	rsb	r1, r2, #32
 800068c:	fa20 f101 	lsr.w	r1, r0, r1
 8000690:	fa0c fc02 	lsl.w	ip, ip, r2
 8000694:	ea41 0803 	orr.w	r8, r1, r3
 8000698:	4094      	lsls	r4, r2
 800069a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800069e:	fbb8 f7f1 	udiv	r7, r8, r1
 80006a2:	fa1f fe8c 	uxth.w	lr, ip
 80006a6:	fb01 8817 	mls	r8, r1, r7, r8
 80006aa:	fb07 f00e 	mul.w	r0, r7, lr
 80006ae:	0c23      	lsrs	r3, r4, #16
 80006b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006b4:	4298      	cmp	r0, r3
 80006b6:	d90a      	bls.n	80006ce <__udivmoddi4+0x66>
 80006b8:	eb1c 0303 	adds.w	r3, ip, r3
 80006bc:	f107 35ff 	add.w	r5, r7, #4294967295
 80006c0:	f080 811e 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c4:	4298      	cmp	r0, r3
 80006c6:	f240 811b 	bls.w	8000900 <__udivmoddi4+0x298>
 80006ca:	3f02      	subs	r7, #2
 80006cc:	4463      	add	r3, ip
 80006ce:	1a1b      	subs	r3, r3, r0
 80006d0:	fbb3 f0f1 	udiv	r0, r3, r1
 80006d4:	fb01 3310 	mls	r3, r1, r0, r3
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	b2a4      	uxth	r4, r4
 80006de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e2:	45a6      	cmp	lr, r4
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x94>
 80006e6:	eb1c 0404 	adds.w	r4, ip, r4
 80006ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ee:	f080 8109 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f2:	45a6      	cmp	lr, r4
 80006f4:	f240 8106 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f8:	4464      	add	r4, ip
 80006fa:	3802      	subs	r0, #2
 80006fc:	2100      	movs	r1, #0
 80006fe:	eba4 040e 	sub.w	r4, r4, lr
 8000702:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000706:	b11e      	cbz	r6, 8000710 <__udivmoddi4+0xa8>
 8000708:	2300      	movs	r3, #0
 800070a:	40d4      	lsrs	r4, r2
 800070c:	e9c6 4300 	strd	r4, r3, [r6]
 8000710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000714:	428b      	cmp	r3, r1
 8000716:	d908      	bls.n	800072a <__udivmoddi4+0xc2>
 8000718:	2e00      	cmp	r6, #0
 800071a:	f000 80ee 	beq.w	80008fa <__udivmoddi4+0x292>
 800071e:	2100      	movs	r1, #0
 8000720:	e9c6 0500 	strd	r0, r5, [r6]
 8000724:	4608      	mov	r0, r1
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f183 	clz	r1, r3
 800072e:	2900      	cmp	r1, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	42ab      	cmp	r3, r5
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80fc 	bhi.w	8000934 <__udivmoddi4+0x2cc>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb65 0303 	sbc.w	r3, r5, r3
 8000742:	2001      	movs	r0, #1
 8000744:	4698      	mov	r8, r3
 8000746:	2e00      	cmp	r6, #0
 8000748:	d0e2      	beq.n	8000710 <__udivmoddi4+0xa8>
 800074a:	e9c6 4800 	strd	r4, r8, [r6]
 800074e:	e7df      	b.n	8000710 <__udivmoddi4+0xa8>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8091 	bne.w	8000880 <__udivmoddi4+0x218>
 800075e:	eba1 000c 	sub.w	r0, r1, ip
 8000762:	2101      	movs	r1, #1
 8000764:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000768:	fa1f fe8c 	uxth.w	lr, ip
 800076c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000770:	fb07 0013 	mls	r0, r7, r3, r0
 8000774:	0c25      	lsrs	r5, r4, #16
 8000776:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	42a8      	cmp	r0, r5
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0505 	adds.w	r5, ip, r5
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	42a8      	cmp	r0, r5
 800078e:	f200 80ce 	bhi.w	800092e <__udivmoddi4+0x2c6>
 8000792:	4643      	mov	r3, r8
 8000794:	1a2d      	subs	r5, r5, r0
 8000796:	fbb5 f0f7 	udiv	r0, r5, r7
 800079a:	fb07 5510 	mls	r5, r7, r0, r5
 800079e:	fb0e fe00 	mul.w	lr, lr, r0
 80007a2:	b2a4      	uxth	r4, r4
 80007a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80b6 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 80007bc:	4628      	mov	r0, r5
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79e      	b.n	8000706 <__udivmoddi4+0x9e>
 80007c8:	f1c1 0720 	rsb	r7, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa25 fa07 	lsr.w	sl, r5, r7
 80007da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007de:	fbba f8f9 	udiv	r8, sl, r9
 80007e2:	fa20 f307 	lsr.w	r3, r0, r7
 80007e6:	fb09 aa18 	mls	sl, r9, r8, sl
 80007ea:	408d      	lsls	r5, r1
 80007ec:	fa1f fe8c 	uxth.w	lr, ip
 80007f0:	431d      	orrs	r5, r3
 80007f2:	fa00 f301 	lsl.w	r3, r0, r1
 80007f6:	fb08 f00e 	mul.w	r0, r8, lr
 80007fa:	0c2c      	lsrs	r4, r5, #16
 80007fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000800:	42a0      	cmp	r0, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0404 	adds.w	r4, ip, r4
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	42a0      	cmp	r0, r4
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4464      	add	r4, ip
 8000820:	1a24      	subs	r4, r4, r0
 8000822:	fbb4 f0f9 	udiv	r0, r4, r9
 8000826:	fb09 4410 	mls	r4, r9, r0, r4
 800082a:	fb00 fe0e 	mul.w	lr, r0, lr
 800082e:	b2ad      	uxth	r5, r5
 8000830:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000834:	45a6      	cmp	lr, r4
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0404 	adds.w	r4, ip, r4
 800083c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	45a6      	cmp	lr, r4
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4464      	add	r4, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9502 	umull	r9, r5, r0, r2
 8000852:	eba4 040e 	sub.w	r4, r4, lr
 8000856:	42ac      	cmp	r4, r5
 8000858:	46c8      	mov	r8, r9
 800085a:	46ae      	mov	lr, r5
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d069      	beq.n	8000938 <__udivmoddi4+0x2d0>
 8000864:	ebb3 0208 	subs.w	r2, r3, r8
 8000868:	eb64 040e 	sbc.w	r4, r4, lr
 800086c:	fa22 f301 	lsr.w	r3, r2, r1
 8000870:	fa04 f707 	lsl.w	r7, r4, r7
 8000874:	431f      	orrs	r7, r3
 8000876:	40cc      	lsrs	r4, r1
 8000878:	e9c6 7400 	strd	r7, r4, [r6]
 800087c:	2100      	movs	r1, #0
 800087e:	e747      	b.n	8000710 <__udivmoddi4+0xa8>
 8000880:	fa0c fc02 	lsl.w	ip, ip, r2
 8000884:	f1c2 0120 	rsb	r1, r2, #32
 8000888:	fa25 f301 	lsr.w	r3, r5, r1
 800088c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000890:	fa20 f101 	lsr.w	r1, r0, r1
 8000894:	4095      	lsls	r5, r2
 8000896:	430d      	orrs	r5, r1
 8000898:	fbb3 f1f7 	udiv	r1, r3, r7
 800089c:	fb07 3311 	mls	r3, r7, r1, r3
 80008a0:	fa1f fe8c 	uxth.w	lr, ip
 80008a4:	0c28      	lsrs	r0, r5, #16
 80008a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008aa:	fb01 f30e 	mul.w	r3, r1, lr
 80008ae:	4283      	cmp	r3, r0
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0000 	adds.w	r0, ip, r0
 80008ba:	f101 38ff 	add.w	r8, r1, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	4283      	cmp	r3, r0
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3902      	subs	r1, #2
 80008c6:	4460      	add	r0, ip
 80008c8:	1ac0      	subs	r0, r0, r3
 80008ca:	fbb0 f3f7 	udiv	r3, r0, r7
 80008ce:	fb07 0013 	mls	r0, r7, r3, r0
 80008d2:	b2ad      	uxth	r5, r5
 80008d4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008d8:	fb03 f00e 	mul.w	r0, r3, lr
 80008dc:	42a8      	cmp	r0, r5
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0505 	adds.w	r5, ip, r5
 80008e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	42a8      	cmp	r0, r5
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3b02      	subs	r3, #2
 80008f0:	4465      	add	r5, ip
 80008f2:	1a28      	subs	r0, r5, r0
 80008f4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	4631      	mov	r1, r6
 80008fc:	4630      	mov	r0, r6
 80008fe:	e707      	b.n	8000710 <__udivmoddi4+0xa8>
 8000900:	462f      	mov	r7, r5
 8000902:	e6e4      	b.n	80006ce <__udivmoddi4+0x66>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f9      	b.n	80006fc <__udivmoddi4+0x94>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4643      	mov	r3, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4628      	mov	r0, r5
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4641      	mov	r1, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	4464      	add	r4, ip
 800092a:	3802      	subs	r0, #2
 800092c:	e747      	b.n	80007be <__udivmoddi4+0x156>
 800092e:	3b02      	subs	r3, #2
 8000930:	4465      	add	r5, ip
 8000932:	e72f      	b.n	8000794 <__udivmoddi4+0x12c>
 8000934:	4608      	mov	r0, r1
 8000936:	e706      	b.n	8000746 <__udivmoddi4+0xde>
 8000938:	4631      	mov	r1, r6
 800093a:	e6e9      	b.n	8000710 <__udivmoddi4+0xa8>

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <delay+0x2c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8000952:	bf00      	nop
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <delay+0x2c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	429a      	cmp	r2, r3
 800095e:	d3f9      	bcc.n	8000954 <delay+0x14>
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000028 	.word	0x20000028

08000970 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 fc76 	bl	8001290 <HAL_GPIO_Init>
}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 fc58 	bl	8001290 <HAL_GPIO_Init>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <DS18B20_Start>:

#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start (void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80009f2:	2102      	movs	r1, #2
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <DS18B20_Start+0x5c>)
 80009f6:	f7ff ffbb 	bl	8000970 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80009fa:	2200      	movs	r2, #0
 80009fc:	2102      	movs	r1, #2
 80009fe:	4811      	ldr	r0, [pc, #68]	; (8000a44 <DS18B20_Start+0x5c>)
 8000a00:	f000 fdd5 	bl	80015ae <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8000a04:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000a08:	f7ff ff9a 	bl	8000940 <delay>
	//HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 1);

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <DS18B20_Start+0x5c>)
 8000a10:	f7ff ffcc 	bl	80009ac <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8000a14:	2050      	movs	r0, #80	; 0x50
 8000a16:	f7ff ff93 	bl	8000940 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <DS18B20_Start+0x5c>)
 8000a1e:	f000 fdaf 	bl	8001580 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <DS18B20_Start+0x46>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	e001      	b.n	8000a32 <DS18B20_Start+0x4a>
	else Response = -1;
 8000a2e:	23ff      	movs	r3, #255	; 0xff
 8000a30:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 8000a32:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a36:	f7ff ff83 	bl	8000940 <delay>

	return Response;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40020000 	.word	0x40020000

08000a48 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000a52:	2102      	movs	r1, #2
 8000a54:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <DS18B20_Write+0x88>)
 8000a56:	f7ff ff8b 	bl	8000970 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	e02e      	b.n	8000abe <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	fa42 f303 	asr.w	r3, r2, r3
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d013      	beq.n	8000a98 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000a70:	2102      	movs	r1, #2
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <DS18B20_Write+0x88>)
 8000a74:	f7ff ff7c 	bl	8000970 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <DS18B20_Write+0x88>)
 8000a7e:	f000 fd96 	bl	80015ae <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff ff5c 	bl	8000940 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <DS18B20_Write+0x88>)
 8000a8c:	f7ff ff8e 	bl	80009ac <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8000a90:	2032      	movs	r0, #50	; 0x32
 8000a92:	f7ff ff55 	bl	8000940 <delay>
 8000a96:	e00f      	b.n	8000ab8 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000a98:	2102      	movs	r1, #2
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <DS18B20_Write+0x88>)
 8000a9c:	f7ff ff68 	bl	8000970 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <DS18B20_Write+0x88>)
 8000aa6:	f000 fd82 	bl	80015ae <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8000aaa:	2032      	movs	r0, #50	; 0x32
 8000aac:	f7ff ff48 	bl	8000940 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <DS18B20_Write+0x88>)
 8000ab4:	f7ff ff7a 	bl	80009ac <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2b07      	cmp	r3, #7
 8000ac2:	ddcd      	ble.n	8000a60 <DS18B20_Write+0x18>
		}
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000ade:	2102      	movs	r1, #2
 8000ae0:	481a      	ldr	r0, [pc, #104]	; (8000b4c <DS18B20_Read+0x78>)
 8000ae2:	f7ff ff63 	bl	80009ac <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	e026      	b.n	8000b3a <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8000aec:	2102      	movs	r1, #2
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <DS18B20_Read+0x78>)
 8000af0:	f7ff ff3e 	bl	8000970 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8000af4:	2200      	movs	r2, #0
 8000af6:	2102      	movs	r1, #2
 8000af8:	4814      	ldr	r0, [pc, #80]	; (8000b4c <DS18B20_Read+0x78>)
 8000afa:	f000 fd58 	bl	80015ae <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff ff1e 	bl	8000940 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8000b04:	2102      	movs	r1, #2
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <DS18B20_Read+0x78>)
 8000b08:	f7ff ff50 	bl	80009ac <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <DS18B20_Read+0x78>)
 8000b10:	f000 fd36 	bl	8001580 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d009      	beq.n	8000b2e <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8000b2e:	2032      	movs	r0, #50	; 0x32
 8000b30:	f7ff ff06 	bl	8000940 <delay>
	for (int i=0;i<8;i++)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	ddd5      	ble.n	8000aec <DS18B20_Read+0x18>
	}
	return value;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40020000 	.word	0x40020000

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 fa27 	bl	8000fa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f89a 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 f91c 	bl	8000d98 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000b60:	f000 f8e4 	bl	8000d2c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000b64:	483d      	ldr	r0, [pc, #244]	; (8000c5c <main+0x10c>)
 8000b66:	f001 fb3f 	bl	80021e8 <HAL_TIM_Base_Start>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	      Presence = DS18B20_Start ();
 8000b6a:	f7ff ff3d 	bl	80009e8 <DS18B20_Start>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <main+0x110>)
 8000b74:	701a      	strb	r2, [r3, #0]
	  	  HAL_Delay (1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fa84 	bl	8001084 <HAL_Delay>
	  	  DS18B20_Write (0xCC);  // skip ROM
 8000b7c:	20cc      	movs	r0, #204	; 0xcc
 8000b7e:	f7ff ff63 	bl	8000a48 <DS18B20_Write>
	  	  DS18B20_Write (0x44);  // convert t
 8000b82:	2044      	movs	r0, #68	; 0x44
 8000b84:	f7ff ff60 	bl	8000a48 <DS18B20_Write>
	  	  HAL_Delay (2000);
 8000b88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b8c:	f000 fa7a 	bl	8001084 <HAL_Delay>

	  	  Presence = DS18B20_Start ();
 8000b90:	f7ff ff2a 	bl	80009e8 <DS18B20_Start>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <main+0x110>)
 8000b9a:	701a      	strb	r2, [r3, #0]
	        HAL_Delay(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 fa71 	bl	8001084 <HAL_Delay>
	        DS18B20_Write (0xCC);  // skip ROM
 8000ba2:	20cc      	movs	r0, #204	; 0xcc
 8000ba4:	f7ff ff50 	bl	8000a48 <DS18B20_Write>
	        DS18B20_Write (0xBE);  // Read Scratch-pad
 8000ba8:	20be      	movs	r0, #190	; 0xbe
 8000baa:	f7ff ff4d 	bl	8000a48 <DS18B20_Write>

	      Temp_byte1 = DS18B20_Read();
 8000bae:	f7ff ff91 	bl	8000ad4 <DS18B20_Read>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <main+0x114>)
 8000bb8:	701a      	strb	r2, [r3, #0]

	      Temp_byte2 = DS18B20_Read();
 8000bba:	f7ff ff8b 	bl	8000ad4 <DS18B20_Read>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <main+0x118>)
 8000bc4:	701a      	strb	r2, [r3, #0]
	      Temp_byte3 = DS18B20_Read();
 8000bc6:	f7ff ff85 	bl	8000ad4 <DS18B20_Read>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <main+0x11c>)
 8000bd0:	701a      	strb	r2, [r3, #0]
	      Temp_byte4 = DS18B20_Read();
 8000bd2:	f7ff ff7f 	bl	8000ad4 <DS18B20_Read>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <main+0x120>)
 8000bdc:	701a      	strb	r2, [r3, #0]
	      Temp_byte5 = DS18B20_Read();
 8000bde:	f7ff ff79 	bl	8000ad4 <DS18B20_Read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <main+0x124>)
 8000be8:	701a      	strb	r2, [r3, #0]
	      Temp_byte6 = DS18B20_Read();
 8000bea:	f7ff ff73 	bl	8000ad4 <DS18B20_Read>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <main+0x128>)
 8000bf4:	701a      	strb	r2, [r3, #0]
	      Temp_byte7 = DS18B20_Read();
 8000bf6:	f7ff ff6d 	bl	8000ad4 <DS18B20_Read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <main+0x12c>)
 8000c00:	701a      	strb	r2, [r3, #0]
	      Temp_byte8 = DS18B20_Read();
 8000c02:	f7ff ff67 	bl	8000ad4 <DS18B20_Read>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <main+0x130>)
 8000c0c:	701a      	strb	r2, [r3, #0]
	      Temp_byte9 = DS18B20_Read();
 8000c0e:	f7ff ff61 	bl	8000ad4 <DS18B20_Read>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <main+0x134>)
 8000c18:	701a      	strb	r2, [r3, #0]


	  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <main+0x118>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <main+0x114>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <main+0x138>)
 8000c30:	801a      	strh	r2, [r3, #0]
	  	  Temperature = (float)TEMP/16;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <main+0x138>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fb56 	bl	80002e8 <__aeabi_ui2f>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc5c 	bl	8000500 <__aeabi_fdiv>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <main+0x13c>)
 8000c4e:	601a      	str	r2, [r3, #0]


	  	  HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f000 fa16 	bl	8001084 <HAL_Delay>
	      Presence = DS18B20_Start ();
 8000c58:	e787      	b.n	8000b6a <main+0x1a>
 8000c5a:	bf00      	nop
 8000c5c:	20000028 	.word	0x20000028
 8000c60:	20000078 	.word	0x20000078
 8000c64:	20000068 	.word	0x20000068
 8000c68:	20000069 	.word	0x20000069
 8000c6c:	2000006a 	.word	0x2000006a
 8000c70:	2000006b 	.word	0x2000006b
 8000c74:	2000006c 	.word	0x2000006c
 8000c78:	2000006d 	.word	0x2000006d
 8000c7c:	2000006e 	.word	0x2000006e
 8000c80:	2000006f 	.word	0x2000006f
 8000c84:	20000070 	.word	0x20000070
 8000c88:	20000072 	.word	0x20000072
 8000c8c:	20000074 	.word	0x20000074

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b092      	sub	sp, #72	; 0x48
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2234      	movs	r2, #52	; 0x34
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fbd4 	bl	800244c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <SystemClock_Config+0x98>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <SystemClock_Config+0x98>)
 8000cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000cda:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000cde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fc7b 	bl	80015e0 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000cf0:	f000 f8b4 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d00:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 ff96 	bl	8001c40 <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d1a:	f000 f89f 	bl	8000e5c <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3748      	adds	r7, #72	; 0x48
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40007000 	.word	0x40007000

08000d2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_TIM6_Init+0x64>)
 8000d3c:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <MX_TIM6_Init+0x68>)
 8000d3e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_TIM6_Init+0x64>)
 8000d42:	2207      	movs	r2, #7
 8000d44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_TIM6_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_TIM6_Init+0x64>)
 8000d4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_TIM6_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_TIM6_Init+0x64>)
 8000d5c:	f001 fa04 	bl	8002168 <HAL_TIM_Base_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d66:	f000 f879 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_TIM6_Init+0x64>)
 8000d78:	f001 fae6 	bl	8002348 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d82:	f000 f86b 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000028 	.word	0x20000028
 8000d94:	40001000 	.word	0x40001000

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a21      	ldr	r2, [pc, #132]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_GPIO_Init+0xb8>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4816      	ldr	r0, [pc, #88]	; (8000e54 <MX_GPIO_Init+0xbc>)
 8000dfc:	f000 fbd7 	bl	80015ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	4814      	ldr	r0, [pc, #80]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000e08:	f000 fbd1 	bl	80015ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <MX_GPIO_Init+0xbc>)
 8000e24:	f000 fa34 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000e42:	f000 fa25 	bl	8001290 <HAL_GPIO_Init>

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020800 	.word	0x40020800

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_MspInit+0x58>)
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_MspInit+0x58>)
 8000e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e78:	6253      	str	r3, [r2, #36]	; 0x24
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_MspInit+0x58>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_MspInit+0x58>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_MspInit+0x58>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6213      	str	r3, [r2, #32]
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_MspInit+0x58>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_MspInit+0x58>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_MspInit+0x58>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6253      	str	r3, [r2, #36]	; 0x24
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_MspInit+0x58>)
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40023800 	.word	0x40023800

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0x34>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10b      	bne.n	8000eee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_TIM_Base_MspInit+0x38>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_TIM_Base_MspInit+0x38>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_TIM_Base_MspInit+0x38>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40001000 	.word	0x40001000
 8000efc:	40023800 	.word	0x40023800

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f46:	f000 f881 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
	...

08000f5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f82:	f7ff ffe4 	bl	8000f4e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f001 fa3d 	bl	8002404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f8a:	f7ff fde1 	bl	8000b50 <main>
  bx lr
 8000f8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f98:	080024a0 	.word	0x080024a0
  ldr r2, =_sbss
 8000f9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fa0:	20000080 	.word	0x20000080

08000fa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_IRQHandler>

08000fa6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f939 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f000 f80e 	bl	8000fd8 <HAL_InitTick>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	e001      	b.n	8000fcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc8:	f7ff ff4e 	bl	8000e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_InitTick+0x68>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d022      	beq.n	8001032 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_InitTick+0x6c>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_InitTick+0x68>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f938 	bl	8001276 <HAL_SYSTICK_Config>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10f      	bne.n	800102c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	d809      	bhi.n	8001026 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001012:	2200      	movs	r2, #0
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	f000 f910 	bl	800123e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_InitTick+0x70>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e007      	b.n	8001036 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e004      	b.n	8001036 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e001      	b.n	8001036 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000008 	.word	0x20000008
 8001044:	20000000 	.word	0x20000000
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x1c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x20>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4413      	add	r3, r2
 800105a:	4a03      	ldr	r2, [pc, #12]	; (8001068 <HAL_IncTick+0x1c>)
 800105c:	6013      	str	r3, [r2, #0]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000007c 	.word	0x2000007c
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_GetTick+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	2000007c 	.word	0x2000007c

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff fff0 	bl	8001070 <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d004      	beq.n	80010a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_Delay+0x40>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a8:	bf00      	nop
 80010aa:	f7ff ffe1 	bl	8001070 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d8f7      	bhi.n	80010aa <HAL_Delay+0x26>
  {
  }
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000008 	.word	0x20000008

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff90 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff49 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff5e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffb0 	bl	80011e4 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012a6:	e14e      	b.n	8001546 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8140 	beq.w	8001540 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d130      	bne.n	800133a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 0201 	and.w	r2, r3, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b03      	cmp	r3, #3
 8001344:	d017      	beq.n	8001376 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d123      	bne.n	80013ca <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	6939      	ldr	r1, [r7, #16]
 80013c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0203 	and.w	r2, r3, #3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 809a 	beq.w	8001540 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140c:	4b55      	ldr	r3, [pc, #340]	; (8001564 <HAL_GPIO_Init+0x2d4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4a54      	ldr	r2, [pc, #336]	; (8001564 <HAL_GPIO_Init+0x2d4>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6213      	str	r3, [r2, #32]
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <HAL_GPIO_Init+0x2d4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001424:	4a50      	ldr	r2, [pc, #320]	; (8001568 <HAL_GPIO_Init+0x2d8>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a48      	ldr	r2, [pc, #288]	; (800156c <HAL_GPIO_Init+0x2dc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d013      	beq.n	8001478 <HAL_GPIO_Init+0x1e8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a47      	ldr	r2, [pc, #284]	; (8001570 <HAL_GPIO_Init+0x2e0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d00d      	beq.n	8001474 <HAL_GPIO_Init+0x1e4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a46      	ldr	r2, [pc, #280]	; (8001574 <HAL_GPIO_Init+0x2e4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d007      	beq.n	8001470 <HAL_GPIO_Init+0x1e0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a45      	ldr	r2, [pc, #276]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_GPIO_Init+0x1dc>
 8001468:	2303      	movs	r3, #3
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1ea>
 800146c:	2305      	movs	r3, #5
 800146e:	e004      	b.n	800147a <HAL_GPIO_Init+0x1ea>
 8001470:	2302      	movs	r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x1ea>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_GPIO_Init+0x1ea>
 8001478:	2300      	movs	r3, #0
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4093      	lsls	r3, r2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800148a:	4937      	ldr	r1, [pc, #220]	; (8001568 <HAL_GPIO_Init+0x2d8>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_GPIO_Init+0x2ec>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent);
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014bc:	4a2f      	ldr	r2, [pc, #188]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent);
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014e6:	4a25      	ldr	r2, [pc, #148]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent);
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001510:	4a1a      	ldr	r2, [pc, #104]	; (800157c <HAL_GPIO_Init+0x2ec>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_GPIO_Init+0x2ec>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent);
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_GPIO_Init+0x2ec>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f aea9 	bne.w	80012a8 <HAL_GPIO_Init+0x18>
  }
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40010000 	.word	0x40010000
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015be:	787b      	ldrb	r3, [r7, #1]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	041a      	lsls	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e31d      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f2:	4b94      	ldr	r3, [pc, #592]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015fc:	4b91      	ldr	r3, [pc, #580]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d07b      	beq.n	800170a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d006      	beq.n	8001626 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d10f      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d10b      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4b87      	ldr	r3, [pc, #540]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06a      	beq.n	8001708 <HAL_RCC_OscConfig+0x128>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d166      	bne.n	8001708 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e2f7      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d106      	bne.n	8001654 <HAL_RCC_OscConfig+0x74>
 8001646:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7e      	ldr	r2, [pc, #504]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e02d      	b.n	80016b0 <HAL_RCC_OscConfig+0xd0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x96>
 800165c:	4b79      	ldr	r3, [pc, #484]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a78      	ldr	r2, [pc, #480]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b76      	ldr	r3, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a75      	ldr	r2, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0xd0>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0xb8>
 800167e:	4b71      	ldr	r3, [pc, #452]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a70      	ldr	r2, [pc, #448]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b6e      	ldr	r3, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6d      	ldr	r2, [pc, #436]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0xd0>
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a69      	ldr	r2, [pc, #420]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a66      	ldr	r2, [pc, #408]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fcda 	bl	8001070 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fcd6 	bl	8001070 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e2ad      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016d2:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0xe0>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fcc6 	bl	8001070 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fcc2 	bl	8001070 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e299      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016fa:	4b52      	ldr	r3, [pc, #328]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x108>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d05a      	beq.n	80017cc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d005      	beq.n	8001728 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d119      	bne.n	8001756 <HAL_RCC_OscConfig+0x176>
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d116      	bne.n	8001756 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001728:	4b46      	ldr	r3, [pc, #280]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_OscConfig+0x160>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d001      	beq.n	8001740 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e276      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b40      	ldr	r3, [pc, #256]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	493d      	ldr	r1, [pc, #244]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001754:	e03a      	b.n	80017cc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d020      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175e:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <HAL_RCC_OscConfig+0x268>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fc84 	bl	8001070 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fc80 	bl	8001070 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e257      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	492a      	ldr	r1, [pc, #168]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
 800179e:	e015      	b.n	80017cc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a0:	4b29      	ldr	r3, [pc, #164]	; (8001848 <HAL_RCC_OscConfig+0x268>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fc63 	bl	8001070 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff fc5f 	bl	8001070 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e236      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80b8 	beq.w	800194a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d170      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x218>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e21a      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001804:	429a      	cmp	r2, r3
 8001806:	d921      	bls.n	800184c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fc4b 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e208      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4906      	ldr	r1, [pc, #24]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	061b      	lsls	r3, r3, #24
 800183c:	4901      	ldr	r1, [pc, #4]	; (8001844 <HAL_RCC_OscConfig+0x264>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
 8001842:	e020      	b.n	8001886 <HAL_RCC_OscConfig+0x2a6>
 8001844:	40023800 	.word	0x40023800
 8001848:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184c:	4b99      	ldr	r3, [pc, #612]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4996      	ldr	r1, [pc, #600]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800185e:	4b95      	ldr	r3, [pc, #596]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	061b      	lsls	r3, r3, #24
 800186c:	4991      	ldr	r1, [pc, #580]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fc16 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e1d3      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	0b5b      	lsrs	r3, r3, #13
 800188c:	3301      	adds	r3, #1
 800188e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001896:	4a87      	ldr	r2, [pc, #540]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001898:	6892      	ldr	r2, [r2, #8]
 800189a:	0912      	lsrs	r2, r2, #4
 800189c:	f002 020f 	and.w	r2, r2, #15
 80018a0:	4985      	ldr	r1, [pc, #532]	; (8001ab8 <HAL_RCC_OscConfig+0x4d8>)
 80018a2:	5c8a      	ldrb	r2, [r1, r2]
 80018a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018a6:	4a85      	ldr	r2, [pc, #532]	; (8001abc <HAL_RCC_OscConfig+0x4dc>)
 80018a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018aa:	4b85      	ldr	r3, [pc, #532]	; (8001ac0 <HAL_RCC_OscConfig+0x4e0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fb92 	bl	8000fd8 <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d045      	beq.n	800194a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	e1b5      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d029      	beq.n	800191e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ca:	4b7e      	ldr	r3, [pc, #504]	; (8001ac4 <HAL_RCC_OscConfig+0x4e4>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fbce 	bl	8001070 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d8:	f7ff fbca 	bl	8001070 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1a1      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018ea:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f6:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	496c      	ldr	r1, [pc, #432]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	4967      	ldr	r1, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	e015      	b.n	800194a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800191e:	4b69      	ldr	r3, [pc, #420]	; (8001ac4 <HAL_RCC_OscConfig+0x4e4>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fba4 	bl	8001070 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800192c:	f7ff fba0 	bl	8001070 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e177      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800193e:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d030      	beq.n	80019b8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d016      	beq.n	800198c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195e:	4b5a      	ldr	r3, [pc, #360]	; (8001ac8 <HAL_RCC_OscConfig+0x4e8>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fb84 	bl	8001070 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fb80 	bl	8001070 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e157      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800197e:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x38c>
 800198a:	e015      	b.n	80019b8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198c:	4b4e      	ldr	r3, [pc, #312]	; (8001ac8 <HAL_RCC_OscConfig+0x4e8>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff fb6d 	bl	8001070 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199a:	f7ff fb69 	bl	8001070 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e140      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ac:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80b5 	beq.w	8001b30 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ca:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	4a36      	ldr	r2, [pc, #216]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	6253      	str	r3, [r2, #36]	; 0x24
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b36      	ldr	r3, [pc, #216]	; (8001acc <HAL_RCC_OscConfig+0x4ec>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b33      	ldr	r3, [pc, #204]	; (8001acc <HAL_RCC_OscConfig+0x4ec>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a32      	ldr	r2, [pc, #200]	; (8001acc <HAL_RCC_OscConfig+0x4ec>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb31 	bl	8001070 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fb2d 	bl	8001070 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e104      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <HAL_RCC_OscConfig+0x4ec>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x466>
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a42:	6353      	str	r3, [r2, #52]	; 0x34
 8001a44:	e02d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4c2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x488>
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a52:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a58:	6353      	str	r3, [r2, #52]	; 0x34
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a64:	6353      	str	r3, [r2, #52]	; 0x34
 8001a66:	e01c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4c2>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4aa>
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a80:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6353      	str	r3, [r2, #52]	; 0x34
 8001a88:	e00b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4c2>
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a94:	6353      	str	r3, [r2, #52]	; 0x34
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9a:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 8001a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aa0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fae1 	bl	8001070 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ab0:	e019      	b.n	8001ae6 <HAL_RCC_OscConfig+0x506>
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08002480 	.word	0x08002480
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	42470020 	.word	0x42470020
 8001ac8:	42470680 	.word	0x42470680
 8001acc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff face 	bl	8001070 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0a3      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ee      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4f0>
 8001af2:	e014      	b.n	8001b1e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fabc 	bl	8001070 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff fab8 	bl	8001070 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e08d      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ee      	bne.n	8001afc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b1e:	7ffb      	ldrb	r3, [r7, #31]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d079      	beq.n	8001c2c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b0c      	cmp	r3, #12
 8001b3c:	d056      	beq.n	8001bec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d13b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x65c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fa90 	bl	8001070 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fa8c 	bl	8001070 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e063      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b66:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	4319      	orrs	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	492b      	ldr	r1, [pc, #172]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x65c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa6b 	bl	8001070 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fa67 	bl	8001070 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e03e      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x5be>
 8001bbc:	e036      	b.n	8001c2c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_RCC_OscConfig+0x65c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa54 	bl	8001070 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff fa50 	bl	8001070 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e027      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5ec>
 8001bea:	e01f      	b.n	8001c2c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e01a      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_RCC_OscConfig+0x658>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10d      	bne.n	8001c28 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	42470060 	.word	0x42470060

08001c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e11a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d919      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x34>
 8001c68:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a89      	ldr	r2, [pc, #548]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 0201 	bic.w	r2, r3, #1
 8001c7c:	4985      	ldr	r1, [pc, #532]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c84:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0f9      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca2:	4b7d      	ldr	r3, [pc, #500]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	497a      	ldr	r1, [pc, #488]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 808e 	beq.w	8001dde <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cca:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d121      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0d7      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0cb      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0bf      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0b7      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	495c      	ldr	r1, [pc, #368]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f9a0 	bl	8001070 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d112      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f7ff f998 	bl	8001070 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e09b      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d52:	4b51      	ldr	r3, [pc, #324]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d1ee      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xfc>
 8001d5e:	e03e      	b.n	8001dde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d112      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7ff f981 	bl	8001070 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e084      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b45      	ldr	r3, [pc, #276]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d1ee      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x12a>
 8001d8c:	e027      	b.n	8001dde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d11d      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d98:	f7ff f96a 	bl	8001070 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e06d      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d1ee      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x158>
 8001dba:	e010      	b.n	8001dde <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7ff f958 	bl	8001070 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e05b      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d219      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1be>
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0201 	bic.w	r2, r3, #1
 8001e06:	4923      	ldr	r1, [pc, #140]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_ClockConfig+0x254>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e034      	b.n	8001e8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4917      	ldr	r1, [pc, #92]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	490f      	ldr	r1, [pc, #60]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e5e:	f000 f823 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_RCC_ClockConfig+0x258>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	490b      	ldr	r1, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	5ccb      	ldrb	r3, [r1, r3]
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f8aa 	bl	8000fd8 <HAL_InitTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e88:	7afb      	ldrb	r3, [r7, #11]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08002480 	.word	0x08002480
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eac:	b092      	sub	sp, #72	; 0x48
 8001eae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001eb0:	4b79      	ldr	r3, [pc, #484]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d00d      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x34>
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	f200 80d5 	bhi.w	8002070 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x28>
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x2e>
 8001ece:	e0cf      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b72      	ldr	r3, [pc, #456]	; (800209c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001ed2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001ed4:	e0da      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001ed8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001eda:	e0d7      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001ee6:	5c9b      	ldrb	r3, [r3, r2]
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eec:	0d9b      	lsrs	r3, r3, #22
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef6:	4b68      	ldr	r3, [pc, #416]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d05d      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f04:	2200      	movs	r2, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	460d      	mov	r5, r1
 8001f0e:	4622      	mov	r2, r4
 8001f10:	462b      	mov	r3, r5
 8001f12:	f04f 0000 	mov.w	r0, #0
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	0159      	lsls	r1, r3, #5
 8001f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f20:	0150      	lsls	r0, r2, #5
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4621      	mov	r1, r4
 8001f28:	1a51      	subs	r1, r2, r1
 8001f2a:	6139      	str	r1, [r7, #16]
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f40:	4659      	mov	r1, fp
 8001f42:	018b      	lsls	r3, r1, #6
 8001f44:	4651      	mov	r1, sl
 8001f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4a:	4651      	mov	r1, sl
 8001f4c:	018a      	lsls	r2, r1, #6
 8001f4e:	46d4      	mov	ip, sl
 8001f50:	ebb2 080c 	subs.w	r8, r2, ip
 8001f54:	4659      	mov	r1, fp
 8001f56:	eb63 0901 	sbc.w	r9, r3, r1
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f6e:	4690      	mov	r8, r2
 8001f70:	4699      	mov	r9, r3
 8001f72:	4623      	mov	r3, r4
 8001f74:	eb18 0303 	adds.w	r3, r8, r3
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	462b      	mov	r3, r5
 8001f7c:	eb49 0303 	adc.w	r3, r9, r3
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f8e:	4629      	mov	r1, r5
 8001f90:	024b      	lsls	r3, r1, #9
 8001f92:	4620      	mov	r0, r4
 8001f94:	4629      	mov	r1, r5
 8001f96:	4604      	mov	r4, r0
 8001f98:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	024a      	lsls	r2, r1, #9
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fb0:	f7fe fb42 	bl	8000638 <__aeabi_uldivmod>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	647b      	str	r3, [r7, #68]	; 0x44
 8001fbc:	e055      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	623b      	str	r3, [r7, #32]
 8001fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8001fc6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fca:	4642      	mov	r2, r8
 8001fcc:	464b      	mov	r3, r9
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	46c4      	mov	ip, r8
 8001fe4:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001fe8:	4640      	mov	r0, r8
 8001fea:	4649      	mov	r1, r9
 8001fec:	468c      	mov	ip, r1
 8001fee:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ffe:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002002:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002006:	ebb2 040a 	subs.w	r4, r2, sl
 800200a:	eb63 050b 	sbc.w	r5, r3, fp
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	00eb      	lsls	r3, r5, #3
 8002018:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800201c:	00e2      	lsls	r2, r4, #3
 800201e:	4614      	mov	r4, r2
 8002020:	461d      	mov	r5, r3
 8002022:	4603      	mov	r3, r0
 8002024:	18e3      	adds	r3, r4, r3
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	eb45 0303 	adc.w	r3, r5, r3
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9d7 4500 	ldrd	r4, r5, [r7]
 800203c:	4629      	mov	r1, r5
 800203e:	028b      	lsls	r3, r1, #10
 8002040:	4620      	mov	r0, r4
 8002042:	4629      	mov	r1, r5
 8002044:	4604      	mov	r4, r0
 8002046:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800204a:	4601      	mov	r1, r0
 800204c:	028a      	lsls	r2, r1, #10
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	2200      	movs	r2, #0
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	61fa      	str	r2, [r7, #28]
 800205a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205e:	f7fe faeb 	bl	8000638 <__aeabi_uldivmod>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4613      	mov	r3, r2
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800206a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800206e:	e00d      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	0b5b      	lsrs	r3, r3, #13
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	3301      	adds	r3, #1
 8002080:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800208a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800208e:	4618      	mov	r0, r3
 8002090:	3748      	adds	r7, #72	; 0x48
 8002092:	46bd      	mov	sp, r7
 8002094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	00f42400 	.word	0x00f42400
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	08002474 	.word	0x08002474

080020a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12c      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c0:	4b26      	ldr	r3, [pc, #152]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e016      	b.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e2:	6253      	str	r3, [r2, #36]	; 0x24
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80020f8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002104:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800210c:	d105      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002114:	d101      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002116:	2301      	movs	r3, #1
 8002118:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 0201 	bic.w	r2, r3, #1
 8002134:	490b      	ldr	r1, [pc, #44]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40007000 	.word	0x40007000
 8002164:	40023c00 	.word	0x40023c00

08002168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e031      	b.n	80021de <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fe98 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f000 f868 	bl	800227c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d001      	beq.n	8002200 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e032      	b.n	8002266 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d00e      	beq.n	8002230 <HAL_TIM_Base_Start+0x48>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_TIM_Base_Start+0x88>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_TIM_Base_Start+0x48>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_TIM_Base_Start+0x8c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d004      	beq.n	8002230 <HAL_TIM_Base_Start+0x48>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_TIM_Base_Start+0x90>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d111      	bne.n	8002254 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b06      	cmp	r3, #6
 8002240:	d010      	beq.n	8002264 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002252:	e007      	b.n	8002264 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40010800 	.word	0x40010800

0800227c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002292:	d00b      	beq.n	80022ac <TIM_Base_SetConfig+0x30>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a27      	ldr	r2, [pc, #156]	; (8002334 <TIM_Base_SetConfig+0xb8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <TIM_Base_SetConfig+0x30>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a26      	ldr	r2, [pc, #152]	; (8002338 <TIM_Base_SetConfig+0xbc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0x30>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a25      	ldr	r2, [pc, #148]	; (800233c <TIM_Base_SetConfig+0xc0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d013      	beq.n	80022ee <TIM_Base_SetConfig+0x72>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1a      	ldr	r2, [pc, #104]	; (8002334 <TIM_Base_SetConfig+0xb8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00f      	beq.n	80022ee <TIM_Base_SetConfig+0x72>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a19      	ldr	r2, [pc, #100]	; (8002338 <TIM_Base_SetConfig+0xbc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00b      	beq.n	80022ee <TIM_Base_SetConfig+0x72>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a18      	ldr	r2, [pc, #96]	; (800233c <TIM_Base_SetConfig+0xc0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <TIM_Base_SetConfig+0x72>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a17      	ldr	r2, [pc, #92]	; (8002340 <TIM_Base_SetConfig+0xc4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <TIM_Base_SetConfig+0x72>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a16      	ldr	r2, [pc, #88]	; (8002344 <TIM_Base_SetConfig+0xc8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d108      	bne.n	8002300 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	615a      	str	r2, [r3, #20]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40000400 	.word	0x40000400
 8002338:	40000800 	.word	0x40000800
 800233c:	40010800 	.word	0x40010800
 8002340:	40010c00 	.word	0x40010c00
 8002344:	40011000 	.word	0x40011000

08002348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800235c:	2302      	movs	r3, #2
 800235e:	e046      	b.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a2:	d00e      	beq.n	80023c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10c      	bne.n	80023dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40000800 	.word	0x40000800
 8002400:	40010800 	.word	0x40010800

08002404 <__libc_init_array>:
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	2600      	movs	r6, #0
 8002408:	4d0c      	ldr	r5, [pc, #48]	; (800243c <__libc_init_array+0x38>)
 800240a:	4c0d      	ldr	r4, [pc, #52]	; (8002440 <__libc_init_array+0x3c>)
 800240c:	1b64      	subs	r4, r4, r5
 800240e:	10a4      	asrs	r4, r4, #2
 8002410:	42a6      	cmp	r6, r4
 8002412:	d109      	bne.n	8002428 <__libc_init_array+0x24>
 8002414:	f000 f822 	bl	800245c <_init>
 8002418:	2600      	movs	r6, #0
 800241a:	4d0a      	ldr	r5, [pc, #40]	; (8002444 <__libc_init_array+0x40>)
 800241c:	4c0a      	ldr	r4, [pc, #40]	; (8002448 <__libc_init_array+0x44>)
 800241e:	1b64      	subs	r4, r4, r5
 8002420:	10a4      	asrs	r4, r4, #2
 8002422:	42a6      	cmp	r6, r4
 8002424:	d105      	bne.n	8002432 <__libc_init_array+0x2e>
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	f855 3b04 	ldr.w	r3, [r5], #4
 800242c:	4798      	blx	r3
 800242e:	3601      	adds	r6, #1
 8002430:	e7ee      	b.n	8002410 <__libc_init_array+0xc>
 8002432:	f855 3b04 	ldr.w	r3, [r5], #4
 8002436:	4798      	blx	r3
 8002438:	3601      	adds	r6, #1
 800243a:	e7f2      	b.n	8002422 <__libc_init_array+0x1e>
 800243c:	08002498 	.word	0x08002498
 8002440:	08002498 	.word	0x08002498
 8002444:	08002498 	.word	0x08002498
 8002448:	0800249c 	.word	0x0800249c

0800244c <memset>:
 800244c:	4603      	mov	r3, r0
 800244e:	4402      	add	r2, r0
 8002450:	4293      	cmp	r3, r2
 8002452:	d100      	bne.n	8002456 <memset+0xa>
 8002454:	4770      	bx	lr
 8002456:	f803 1b01 	strb.w	r1, [r3], #1
 800245a:	e7f9      	b.n	8002450 <memset+0x4>

0800245c <_init>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	bf00      	nop
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr

08002468 <_fini>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	bf00      	nop
 800246c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246e:	bc08      	pop	{r3}
 8002470:	469e      	mov	lr, r3
 8002472:	4770      	bx	lr
